package vista;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DateTimePicker;
import com.github.lgooddatepicker.components.TimePicker;
import com.github.lgooddatepicker.optionalusertools.DateChangeListener;
import com.github.lgooddatepicker.zinternaltools.DateChangeEvent;

import javax.swing.UIManager;
import javax.swing.JTextField;
import java.awt.event.InputMethodListener;
import java.time.format.DateTimeFormatter;
import java.awt.event.InputMethodEvent;

public class FrmLgoodDatePicker extends JFrame implements DateChangeListener, InputMethodListener {

	private JPanel contentPane;
	private DatePicker dpPrueba1;
	private JTextField txtMostrar;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Throwable e) {
			e.printStackTrace();
		}
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					FrmLgoodDatePicker frame = new FrmLgoodDatePicker();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public FrmLgoodDatePicker() {
		initComponents();
	}
	private void initComponents() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		dpPrueba1 = new DatePicker();
		dpPrueba1.addInputMethodListener(this);
		dpPrueba1.getComponentDateTextField().addInputMethodListener(this);
		dpPrueba1.addDateChangeListener(this);
		dpPrueba1.setBounds(61, 44, 249, 31);
		contentPane.add(dpPrueba1);
		
		txtMostrar = new JTextField();
		txtMostrar.setBounds(71, 96, 122, 28);
		contentPane.add(txtMostrar);
		txtMostrar.setColumns(10);
		
		DateTimeFormatter formatoLocal = DateTimeFormatter.ofPattern("dd-MM-yyyy");
		dpPrueba1.getSettings().setFormatForDatesCommonEra(formatoLocal);
		//txtMostrar.setText(f.);
	}
	
	
	public void Configura(){
		dpPrueba1.addDateChangeListener(new DateChangeListener() {
			
			@Override
			public void dateChanged(DateChangeEvent arg0) {
				
				
			}
		});
		
	}
	public void dateChanged(DateChangeEvent arg0) {
		
		txtMostrar.setText(dpPrueba1.getDate().toString());
	}
	protected void dateChangedDpPrueba1(DateChangeEvent arg0) {
		
	}
	public void caretPositionChanged(InputMethodEvent arg0) {
	}
	public void inputMethodTextChanged(InputMethodEvent arg0) {
		if (arg0.getSource() == dpPrueba1) {
			inputMethodTextChangedDpPrueba1(arg0);
		}
		if (arg0.getSource() == dpPrueba1.getComponentDateTextField()) {
			inputMethodTextChangedDpPrueba1ComponentDateTextField(arg0);
		}
	}
	protected void inputMethodTextChangedDpPrueba1ComponentDateTextField(InputMethodEvent arg0) {
		
	}
	protected void inputMethodTextChangedDpPrueba1(InputMethodEvent arg0) {
		
	}
}
